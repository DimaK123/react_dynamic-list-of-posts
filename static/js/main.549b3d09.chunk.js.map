{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","api/data.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","React","memo","userPosts","activePost","setActivePost","className","map","post","id","title","type","classNames","onClick","PostId","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getComments","postId","postComment","name","email","NewCommentForm","getNewComments","commentError","useState","setName","setEmail","comment","setComment","isNameError","setIsNameError","isEmailError","setIsEmailError","isCommentError","setIsCommentError","isCommentLoading","setIsCommentLoading","handleInput","event","callback","currentTarget","value","postCommentOnServer","a","trim","catch","finally","onSubmit","preventDefault","htmlFor","onChange","placeholder","PostDetails","activePostData","listOfComments","setListOfComments","isLoading","setIsLoading","isGetCommentsError","setIsGetCommentsError","showNewCommentForm","setShowNewCommentForm","commentsGetter","useCallback","comments","handleDeleteComment","param","commentId","visibleComments","filter","useEffect","length","bodyOfComment","href","UserSelector","usersList","setUser","activeId","setActiveId","isOpen","setIsOpen","userName","setUserName","handleBlur","relatedTarget","classList","contains","handleActiveId","handleOpenState","currVal","onBlur","role","user","handleChoosenUsere","App","users","setUsers","selectedUserId","setSelectedUserId","posts","setPosts","isPostsLoading","setIsPostsLoading","isGetPostsError","setIsGetPostsError","isNoPostNotif","setIsNoPostNotif","activePostId","setActivePostId","usersGetter","fetchPosts","useMemo","find","p","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.549b3d09.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nimport { Post } from '../types/Post';\n\ntype Props = {\n  userPosts: Post[] | null,\n  activePost: number | null,\n  setActivePost: (param: null | number) => void\n};\n\nexport const PostsList: React.FC<Props>\n= React.memo(({ userPosts, activePost, setActivePost }) => {\n  const handlePostStatus = (PostId: number) => {\n    if (activePost === PostId) {\n      setActivePost(null);\n    } else {\n      setActivePost(PostId);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {userPosts?.map(post => {\n            const { id, title } = post;\n\n            return (\n              <tr data-cy=\"Post\" key={id}>\n                <td data-cy=\"PostId\">{id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames(\n                      'button is-link',\n                      { 'is-light': id !== activePost },\n                    )}\n                    onClick={() => handlePostStatus(id)}\n                  >\n                    {activePost === id ? 'Close' : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n});\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n}; // return userList\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n}; // return list of user posts\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const postComment = (\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n) => {\n  return client.post<Post>('/comments', {\n    postId,\n    name,\n    email,\n    body,\n  });\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { postComment } from '../api/data';\n\ntype Props = {\n  postId: number\n  getNewComments: (postId: number) => Promise<void>;\n  commentError: (param: boolean) => void\n};\n\nexport const NewCommentForm: React.FC<Props>\n= React.memo(({ postId, getNewComments, commentError }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n\n  const [isNameError, setIsNameError] = useState(false);\n  const [isEmailError, setIsEmailError] = useState(false);\n  const [isCommentError, setIsCommentError] = useState(false);\n  const [isCommentLoading, setIsCommentLoading] = useState(false);\n\n  const handleInput = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n    callback: (param: string) => void,\n  ) => {\n    const { value } = event.currentTarget;\n\n    callback(value);\n  };\n\n  const handleClear = () => {\n    setIsEmailError(false);\n    setIsCommentError(false);\n    setIsNameError(false);\n\n    setName('');\n    setEmail('');\n    setComment('');\n  };\n\n  const postCommentOnServer = async () => {\n    if (!name) {\n      setIsNameError(true);\n    }\n\n    if (!email) {\n      setIsEmailError(true);\n    }\n\n    if (!comment) {\n      setIsCommentError(true);\n    }\n\n    if (name && email && comment) {\n      setIsCommentLoading(true);\n\n      postComment(\n        postId,\n        name.trim(),\n        email.trim(),\n        comment.trim(),\n      )\n        .then(() => getNewComments(postId))\n        .catch(() => commentError(true))\n        .finally(() => {\n          setComment('');\n          setIsCommentLoading(false);\n        });\n    }\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n\n        postCommentOnServer();\n      }}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={(event) => {\n              if (isNameError) {\n                setIsNameError(false);\n              }\n\n              handleInput(event, setName);\n            }}\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': isNameError },\n            )}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={email}\n            onChange={(event) => {\n              if (isEmailError) {\n                setIsEmailError(false);\n              }\n\n              handleInput(event, setEmail);\n            }}\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': isEmailError },\n            )}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={comment}\n            onChange={(event) => {\n              if (isCommentError) {\n                setIsCommentError(false);\n              }\n\n              handleInput(event, setComment);\n            }}\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': isCommentError },\n            )}\n          />\n        </div>\n\n        {isCommentError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isCommentLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n});\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { getComments, deleteComment } from '../api/data';\n\ntype Props = {\n  activePostData: Post,\n};\n\nexport const PostDetails: React.FC<Props> = React.memo(({ activePostData }) => {\n  const { id, title, body } = activePostData;\n\n  const [listOfComments, setListOfComments] = useState<null | Comment[]>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isGetCommentsError, setIsGetCommentsError] = useState(false);\n  const [showNewCommentForm, setShowNewCommentForm] = useState(false);\n\n  const commentsGetter = useCallback(async (postId: number) => {\n    try {\n      const comments = await getComments(postId);\n\n      setListOfComments(comments);\n    } catch {\n      setIsGetCommentsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const handleDeleteComment = (param: number) => {\n    const visibleComments = listOfComments?.filter(comment => {\n      const { id: commentId } = comment;\n\n      return commentId !== param;\n    });\n\n    if (visibleComments) {\n      setListOfComments(visibleComments);\n    }\n\n    deleteComment(param)\n      .finally(() => commentsGetter(id));\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    setListOfComments(null);\n\n    if (isGetCommentsError) {\n      setIsGetCommentsError(false);\n    }\n\n    if (showNewCommentForm) {\n      setShowNewCommentForm(false);\n    }\n\n    commentsGetter(id);\n  }, [activePostData]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {!isLoading ? (\n            <>\n              {isGetCommentsError ? (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Something went wrong\n                </div>\n              ) : (\n                <>\n                  {listOfComments && listOfComments.length\n                    ? (<p className=\"title is-4\">Comments:</p>)\n                    : (\n                      <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                        No comments yet\n                      </p>\n                    )}\n\n                  {listOfComments?.map(comment => {\n                    const {\n                      id: commentId,\n                      name,\n                      email,\n                      body: bodyOfComment,\n                    } = comment;\n\n                    return (\n                      <article\n                        className=\"message is-small\"\n                        data-cy=\"Comment\"\n                        key={commentId}\n                      >\n                        <div className=\"message-header\">\n                          <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                            {name}\n                          </a>\n                          <button\n                            data-cy=\"CommentDelete\"\n                            type=\"button\"\n                            className=\"delete is-small\"\n                            aria-label=\"delete\"\n                            onClick={() => handleDeleteComment(commentId)}\n                          >\n                            delete button\n                          </button>\n                        </div>\n\n                        <div className=\"message-body\" data-cy=\"CommentBody\">\n                          {bodyOfComment}\n                        </div>\n                      </article>\n                    );\n                  })}\n\n                  {!showNewCommentForm && (\n                    <button\n                      data-cy=\"WriteCommentButton\"\n                      type=\"button\"\n                      className=\"button is-link\"\n                      onClick={() => setShowNewCommentForm(true)}\n                    >\n                      Write a comment\n                    </button>\n                  )}\n\n                  {showNewCommentForm\n                    && (\n                      <NewCommentForm\n                        postId={id}\n                        getNewComments={commentsGetter}\n                        commentError={setIsGetCommentsError}\n                      />\n                    )}\n                </>\n              )}\n            </>\n          ) : <Loader /> }\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React, { useCallback, useState } from 'react';\n\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  usersList: User[] | null,\n  setUser: (id: number) => void,\n  setActivePost: (param: null | number) => void\n};\n\nexport const UserSelector: React.FC<Props>\n= React.memo(({ usersList, setUser, setActivePost }) => {\n  const [activeId, setActiveId] = useState<number | null>(null);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [userName, setUserName] = useState('Choose a user');\n\n  const handleBlur = useCallback((\n    event: React.FocusEvent<HTMLButtonElement>,\n  ) => {\n    const { relatedTarget } = event;\n\n    if (!relatedTarget || !relatedTarget.classList.contains('dropdown-item')) {\n      setIsOpen(false);\n    }\n  }, []);\n\n  const handleActiveId = useCallback((id: number) => {\n    setActiveId(id);\n  }, []);\n\n  const handleOpenState = useCallback(() => {\n    setIsOpen(currVal => !currVal);\n  }, []);\n\n  const handleChoosenUsere = (name: string, id: number) => {\n    setActivePost(null);\n    setUserName(name);\n    handleActiveId(id);\n    setUser(id);\n    setIsOpen(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': isOpen })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleOpenState}\n          onBlur={handleBlur}\n        >\n          <span>{userName}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n        onBlur={() => setIsOpen(false)}\n      >\n        <div className=\"dropdown-content\">\n          {usersList?.map(user => {\n            const { id, name } = user;\n\n            return (\n              <a\n                href={`#user-${id}`}\n                key={id}\n                className={classNames(\n                  'dropdown-item',\n                  { 'is-active': id === activeId },\n                )}\n                onClick={() => handleChoosenUsere(name, id)}\n              >\n                {name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React, {\n  useState,\n  useCallback,\n  useEffect,\n  useMemo,\n} from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nimport { getUsers, getUserPosts } from './api/data';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[] | null>(null);\n  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [isPostsLoading, setIsPostsLoading] = useState<boolean>(false);\n  const [isGetPostsError, setIsGetPostsError] = useState<boolean>(false);\n  const [isNoPostNotif, setIsNoPostNotif] = useState<boolean>(false);\n  const [activePostId, setActivePostId] = useState<null | number>(null);\n\n  const usersGetter = useCallback(() => {\n    getUsers()\n      .then(setUsers);\n  }, []);\n\n  useEffect(() => {\n    usersGetter();\n  }, []);\n\n  useEffect(() => {\n    if (posts) {\n      setPosts(null);\n    }\n\n    if (isNoPostNotif) {\n      setIsNoPostNotif(false);\n    }\n\n    const fetchPosts = async (id: number) => {\n      try {\n        const response = await getUserPosts(id);\n\n        if (response.length) {\n          setPosts(response);\n        } else {\n          setIsNoPostNotif(true);\n        }\n      } catch {\n        setIsGetPostsError(true);\n      } finally {\n        setIsPostsLoading(false);\n      }\n    };\n\n    if (selectedUserId) {\n      if (isGetPostsError) {\n        setIsGetPostsError(false);\n      }\n\n      setIsPostsLoading(true);\n      fetchPosts(selectedUserId);\n    }\n  }, [selectedUserId]);\n\n  const activePost = useMemo(() => {\n    if (posts) {\n      return posts.find(p => p.id === activePostId);\n    }\n\n    return null;\n  }, [activePostId, posts]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  usersList={users}\n                  setUser={setSelectedUserId}\n                  setActivePost={setActivePostId}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUserId && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isPostsLoading && <Loader />}\n\n                {isGetPostsError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {isNoPostNotif && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {!!posts?.length\n                  && (\n                    <PostsList\n                      userPosts={posts}\n                      activePost={activePostId}\n                      setActivePost={setActivePostId}\n                    />\n                  )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': activePost },\n            )}\n          >\n            {activePost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails activePostData={activePost} />\n              </div>\n            )}\n\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}